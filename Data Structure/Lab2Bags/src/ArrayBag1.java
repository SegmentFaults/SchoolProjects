/** * A class of bags whose entries are stored in a fixed-size array. INITIAL, * INCOMPLETE DEFINITION; no security checks *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.1 */public final class ArrayBag1<T> implements BagInterface<T> {	private final T[] bag;	private int numberOfEntries;	private static final int DEFAULT_CAPACITY = 25;	/** Creates an empty bag whose capacity is 25. */	public ArrayBag1() {		this(DEFAULT_CAPACITY);	} // end default constructor	/**	 * Creates an empty bag having a given capacity.	 * 	 * @param desiredCapacity	 *            The integer capacity desired.	 */	public ArrayBag1(int desiredCapacity) {		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempBag = (T[]) new Object[desiredCapacity]; // Unchecked cast		bag = tempBag;		numberOfEntries = 0;	} // end constructor	/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in this bag.	 */	public T[] toArray() {		// The cast is safe because the new array contains null entries.		@SuppressWarnings("unchecked")		T[] result = (T[]) new Object[numberOfEntries]; // Unchecked cast		for (int index = 0; index < numberOfEntries; index++) {			result[index] = bag[index];		} // end for		return result;		// Note: The body of this method could consist of one return statement,		// if you call Arrays.copyOf	} // end toArray	// Returns true if the array bag is full, or false if not.	private boolean isArrayFull() {		return numberOfEntries >= bag.length;	} // end isArrayFull	/**	 * Sees whether this bag is empty.	 * 	 * @return True if this bag is empty, or false if not	 */	public boolean isEmpty() {		return numberOfEntries == 0;	} // end isEmpty	/**	 * Gets the number of entries currently in this bag.	 * 	 * @return The integer number of entries currently in this bag	 */	public int getCurrentSize() {		return numberOfEntries;	} // end getCurrentSize	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry	 *            The entry to locate	 * @return True if this bag contains anEntry, or false otherwise	 */	public boolean contains(T anEntry) {		boolean found = false;		int index = 0;		while (!found && index < numberOfEntries) {			if (anEntry.equals(bag[index])) {				found = true;			}			index++;		}		return found;	} // end contains	// STUBS:	// SEE IMPLEMENTATION NOTES WITHIN EACH METHOD.	// Note that the array size never needs to change, because we use a counter,	// numberOfEntries,	// to keep track of which elements in the array are real items.	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry	 *            The object to be added as a new entry.	 * @return True if the addition is successful, or false if not.	 */	public boolean add(T newEntry) {		boolean success = false;		if (!this.isArrayFull()) {			bag[numberOfEntries] = newEntry;			numberOfEntries++;			success = true;		}		return success; 	} // end add					/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal was successful, or null	 */	public T remove() {		if (numberOfEntries>0){			T x=bag[numberOfEntries-1];			bag[numberOfEntries-1]=null;			numberOfEntries--;			return x;		}		return null;	} // end remove	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry	 *            The entry to be removed	 * @return True if the removal was successful, or false otherwise	 */	public boolean remove(T anEntry) {			for (int x=0; x<numberOfEntries; x++){				if (bag[x].equals(anEntry)){					bag[x]=bag[numberOfEntries-1];					bag[numberOfEntries-1]=null;					numberOfEntries--;					return true;				}		}		return false; // STUB	} // end remove	/** Removes all entries from this bag. */	public void clear() {		for (int x=0; x<numberOfEntries; x++){			bag[x]=null;		}		numberOfEntries=0;	} // end clear	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry	 *            The entry to be counted	 * @return The number of times anEntry appears in the bag	 */	public int getFrequencyOf(T anEntry) {		int freq=0;		for (int x=0; x<numberOfEntries; x++){			if (bag[x].equals(anEntry))			{				freq++;			}		}		return freq; // STUB	} // end getFrequencyOf} // end ArrayBag1